""" –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π –∫–∞—Ä—Ç—ã """
import html
import re
from aiogram import types

from handlers.users.bot_registration import validate_number
from keyboards.default import kb_main
from loader import dp
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher import FSMContext
from utils.db_api.cards_commands import get_user_cards, add_user_card, delete_user_card, rename_card
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton


class Cards(StatesGroup):
    number = State()
    number_delete = State()
    edit_select = State()
    edit_number = State()
    edit_name = State()
    new_name = State()


kb_cards = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç—É"),
            KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É"),
            KeyboardButton(text="O—Ç–º–µ–Ω–∞"),
        ],

    ],
    resize_keyboard=True,
    one_time_keyboard=True
)


cards_cancel = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="O—Ç–º–µ–Ω–∞"),
        ],

    ],
    resize_keyboard=True,
    one_time_keyboard=True
)


@dp.message_handler(text='O—Ç–º–µ–Ω–∞')
async def cast(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer('–û—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=kb_main)


@dp.message_handler(text='/cards')
async def cards_change(message: types.Message):
    user_id = int(message.from_user.id)
    cards = await get_user_cards(user_id)

    if not cards:
        await message.answer('–£ –í–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ä—Ç, –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é /register')
        return

    lines = []
    for card in cards:
        name = card['card_name'] or '–ò–º—è –∫–∞—Ä—Ç—ã'
        lines.append(f"{card['card_number']} ‚Äî <i>{name}</i>")

    text = "<b>–í–∞—à–∏ –∫–∞—Ä—Ç—ã:</b>\n" + "\n".join(lines)

    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç—É"), KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É")],
            [KeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É")],
            [KeyboardButton(text="O—Ç–º–µ–Ω–∞")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer(text, reply_markup=kb, parse_mode='HTML')

@dp.message_handler(text='‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É')
async def edit_card_start(message: types.Message, state: FSMContext):
    user_id = int(message.from_user.id)
    cards = await get_user_cards(user_id)

    if not cards:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ä—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return

    keyboard = InlineKeyboardMarkup(row_width=1)
    for card in cards:
        name = card['card_name'] or '‚Äî'
        button_text = f"{card['card_number']} ‚Äî {name}"
        keyboard.add(InlineKeyboardButton(text=button_text, callback_data=f"edit_card:{card['card_number']}"))

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:", reply_markup=keyboard)
    await state.finish()

@dp.callback_query_handler(lambda c: c.data.startswith('edit_card:'))
async def handle_edit_card_callback(call: types.CallbackQuery, state: FSMContext):
    card = call.data.split(':', 1)[1]
    await state.update_data(old_card=card)

    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä", callback_data="edit_number"),
        InlineKeyboardButton(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data="edit_name")
    )

    await call.message.answer(f"–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–ª—è –∫–∞—Ä—Ç—ã <code>{card}</code>?", reply_markup=keyboard)
    await call.answer()

@dp.callback_query_handler(text="edit_number")
async def edit_number_selected(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    card = data.get("old_card")
    await call.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –¥–ª—è –∫–∞—Ä—Ç—ã <code>{card}</code>:", reply_markup=cards_cancel)
    await Cards.edit_number.set()
    await call.answer()


@dp.callback_query_handler(text="edit_name")
async def edit_name_selected(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    card = data.get("old_card")
    await call.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è –∫–∞—Ä—Ç—ã <code>{card}</code>:", reply_markup=cards_cancel)
    await Cards.edit_name.set()
    await state.update_data(new_card=card)
    await call.answer()


@dp.message_handler(state=Cards.edit_number)
async def edit_card_number(message: types.Message, state: FSMContext):
    new_number = message.text.strip()
    if validate_number(new_number):
        await state.update_data(new_card=new_number)
        await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è –∫–∞—Ä—Ç—ã:")
        await Cards.edit_name.set()
    else:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 22****7192', reply_markup=cards_cancel)


@dp.message_handler(state=Cards.edit_name)
async def edit_card_name(message: types.Message, state: FSMContext):
    new_name = message.text.strip()
    data = await state.get_data()
    old_card = data['old_card']
    user_id = message.from_user.id

    if await rename_card(user_id, old_card, new_name):
        await message.answer(f'üëç –ò–º—è –∫–∞—Ä—Ç—ã <code>{old_card}</code> –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ <i>{new_name}</i>', parse_mode='HTML')
    else:
        await message.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ –∫–∞—Ä—Ç—ã.')

    await state.finish()


@dp.message_handler(text='–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É')
async def register(message: types.Message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: <code>22****3317</code>', parse_mode='HTML')
    await Cards.number.set()


@dp.message_handler(state=Cards.number)
async def get_number(message: types.Message, state: FSMContext):
    number = message.text
    if number == "O—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer('–û—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=kb_main)
        return

    user_id = int(message.from_user.id)

    if validate_number(number):
        await state.update_data(card_number=number)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è —ç—Ç–æ–π –∫–∞—Ä—Ç—ã:")
        await Cards.new_name.set()
    else:
        await message.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü—Ä–∏–º–µ—Ä: 22****7192:', reply_markup=cards_cancel)

@dp.message_handler(state=Cards.new_name)
async def set_card_name_after_add(message: types.Message, state: FSMContext):
    name = message.text.strip()
    data = await state.get_data()
    card = data.get("card_number")
    user_id = message.from_user.id

    if not card:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ /cards')
        await state.finish()
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ä—Ç—É
    success = await add_user_card(user_id, card, name)
    if not success:
        await message.answer('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞—Ä—Ç—É.')
        await state.finish()
        return

    await message.answer(f'üëç –ö–∞—Ä—Ç–∞ <code>{card}</code> —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ <i>{name}</i>!', parse_mode='HTML')

    # üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –±–æ–Ω—É—Å–Ω–æ–≥–æ ID
    from utils.db_api.ie_commands import get_user_data
    from data.config import ADMIN_IE
    from utils.db_api.bonus_commands import fetch_bonus_accounts_by_card, get_user_by_bonus_id, set_bonus_account_id
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

    user_data = await get_user_data(ADMIN_IE)
    token = user_data.get("token")
    if not token:
        await state.finish()
        return

    bonus_items = await fetch_bonus_accounts_by_card(token, card)
    if not bonus_items:
        await message.answer("üî∏ –ë–æ–Ω—É—Å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —ç—Ç–æ–π –∫–∞—Ä—Ç—ã.")
        await state.finish()
        return

    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∏–ª–∏ –∫ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    available_accounts = [
        b for b in bonus_items if (await get_user_by_bonus_id(b["id"])) in [None, user_id]
    ]

    if not available_accounts:
        await message.answer("‚ùóÔ∏è –í—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –±–æ–Ω—É—Å–Ω—ã–µ ID —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
        await state.finish()
        return

    if len(available_accounts) == 1:
        b = available_accounts[0]
        result = await set_bonus_account_id(user_id, b["id"], card)
        if result is True:
            await message.answer(f"‚úÖ –ë–æ–Ω—É—Å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫–∞—Ä—Ç–µ {card}!")
        elif result is False:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤—è–∑–∞—Ç—å –±–æ–Ω—É—Å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç.")
    else:
        keyboard = InlineKeyboardMarkup(row_width=1)
        for b in available_accounts:
            balance = b["balance"] / 100
            keyboard.add(
                InlineKeyboardButton(
                    text=f"{b['card_number']} ‚Äî {balance:.2f} ‚ÇΩ",
                    callback_data=f"bind_bonus:{b['id']}:{b['card_number']}"
                )
            )
        await message.answer(
            "üßæ –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–æ–Ω—É—Å–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–π –∫–∞—Ä—Ç—ã.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π:",
            reply_markup=keyboard
        )

    await state.finish()


@dp.message_handler(text='–£–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç—É')
async def delete_card(message: types.Message, state: FSMContext):
    user_id = int(message.from_user.id)
    cards = await get_user_cards(user_id)

    if not cards:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ä—Ç.")
        return

    keyboard = InlineKeyboardMarkup(row_width=1)
    for card in cards:
        name = card['card_name'] or '‚Äî'
        button_text = f"{card['card_number']} ‚Äî {name}"
        keyboard.add(InlineKeyboardButton(text=button_text, callback_data=f"delete_card:{card['card_number']}"))

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:", reply_markup=keyboard)
    await state.finish()

@dp.callback_query_handler(lambda c: c.data.startswith('delete_card:'))
async def handle_delete_card_callback(call: types.CallbackQuery):
    card = call.data.split(':', 1)[1]
    user_id = int(call.from_user.id)

    if await delete_user_card(user_id, card):
        await call.message.answer(f'üëç –ö–∞—Ä—Ç–∞ <code>{card}</code> —É–¥–∞–ª–µ–Ω–∞!', parse_mode='HTML')
    else:
        await call.message.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã.')

    await call.answer()



@dp.message_handler(text="–í–∞—à–∏ –∫–∞—Ä—Ç—ã")
async def handle_cards_button(message: types.Message):
    await cards_change(message)
