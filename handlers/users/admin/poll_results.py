# -*- coding: utf-8 -*-
"""
–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–ø—Ä–æ—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.

–§—É–Ω–∫—Ü–∏–∏:
- /poll_results ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ü–û–°–õ–ï–î–ù–ï–ì–û –æ–ø—Ä–æ—Å–∞ —Ç–µ–∫—É—â–µ–≥–æ –∞–¥–º–∏–Ω–∞
- –ö–Ω–æ–ø–∫–∞ "üîÑ –û–±–Ω–æ–≤–∏—Ç—å" ‚Äî –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —ç—Ç–æ–≥–æ –æ–ø—Ä–æ—Å–∞
"""

from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from data.config import ADMIN_IE, CODER
from loader import dp
from utils.db_api.shemas.polls import Polls
from utils.db_api.poll_commands import build_stats_text, get_poll

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è callback
POLL_STAT_REFRESH = "poll_stat_refresh"


def _is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞–º."""
    return user_id in {int(ADMIN_IE), int(CODER)}


def _build_stat_kb(poll_id: int) -> InlineKeyboardMarkup:
    """–°–æ–±—Ä–∞—Ç—å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –±–ª–æ–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–ø—Ä–æ—Å–∞."""
    kb = InlineKeyboardMarkup()
    kb.add(
        InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"{POLL_STAT_REFRESH}:{poll_id}")
    )
    return kb


@dp.message_handler(commands=["poll_results"])
async def cmd_poll_results(message: types.Message) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–ø—Ä–æ—Å–∞ —Ç–µ–∫—É—â–µ–≥–æ –∞–¥–º–∏–Ω–∞."""
    user_id = int(message.from_user.id)

    if not _is_admin(user_id):
        await message.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    # –í—ã–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–ø—Ä–æ—Å –∏–º–µ–Ω–Ω–æ —ç—Ç–æ–≥–æ –∞–¥–º–∏–Ω–∞
    poll = await Polls.query.where(Polls.admin_chat_id == user_id)\
                            .order_by(Polls.id.desc())\
                            .gino.first()

    if not poll:
        await message.answer("–û–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    stats_text, total = build_stats_text(poll.question, poll.options or [], poll.votes or [])
    suffix = f"\n\n<b>–í—Å–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤:</b> {total}"
    await message.answer(
        stats_text + suffix,
        reply_markup=_build_stat_kb(poll.id),
        parse_mode="HTML"
    )


@dp.callback_query_handler(lambda c: c.data and c.data.startswith(f"{POLL_STAT_REFRESH}:"))
async def cb_poll_stat_refresh(call: types.CallbackQuery) -> None:
    """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–ø—Ä–æ—Å–∞."""
    user_id = int(call.from_user.id)
    if not _is_admin(user_id):
        await call.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return

    try:
        _, poll_id_str = call.data.split(":")
        poll_id = int(poll_id_str)
    except Exception:
        await call.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
        return

    poll = await get_poll(poll_id)
    if not poll or int(poll.admin_chat_id or 0) != user_id:
        await call.answer("‚õî –≠—Ç–æ –Ω–µ –≤–∞—à –æ–ø—Ä–æ—Å.", show_alert=True)
        return

    stats_text, total = build_stats_text(poll.question, poll.options or [], poll.votes or [])
    suffix = f"\n\n<b>–í—Å–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤:</b> {total}"
    try:
        await call.message.edit_text(
            stats_text + suffix,
            reply_markup=_build_stat_kb(poll.id),
            parse_mode="HTML"
        )
        await call.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    except Exception:
        await call.answer("–ê–∫—Ç—É–∞–ª—å–Ω–æ.")
