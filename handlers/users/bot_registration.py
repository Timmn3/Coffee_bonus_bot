"""
–•–µ–Ω–¥–ª–µ—Ä —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã, –∏–º–µ–Ω–∏ –∫–∞—Ä—Ç—ã –∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –°–ú–° —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
–†–∞–±–æ—Ç–∞–µ—Ç —Å –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü–µ–π 'cards'.
"""

import re
from aiogram import types
from aiogram.dispatcher import FSMContext

from keyboards.default import cancel_registration, kb_main
from loader import dp
from states import Registration
from utils.db_api.bonus_commands import fetch_bonus_accounts_by_card, get_user_by_bonus_id
from utils.db_api.users_commands import update_phone_number, update_sms_status, select_user
from utils.db_api.cards_commands import get_user_cards, add_user_card
from utils.notify_admins import new_user_registration
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from loguru import logger


@dp.message_handler(text='–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
async def cast(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
    await state.finish()
    await message.answer('–û—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=kb_main)


@dp.message_handler(text=['–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', '/register'])
async def register(message: types.Message):
    """
    –°—Ç–∞—Ä—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
    –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∫–∞—Ä—Ç ‚Äî –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã.
    –ï—Å–ª–∏ –∫–∞—Ä—Ç—ã –µ—Å—Ç—å ‚Äî –≤—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫.
    """
    user_id = int(message.from_user.id)
    cards = await get_user_cards(user_id)

    if not cards:  # –ï—Å–ª–∏ –∫–∞—Ä—Ç –Ω–µ—Ç ‚Äî –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–≤–µ—Å—Ç–∏
        await message.answer('–î–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –∫–∞–∫–æ–π –∫–∞—Ä—Ç–æ–π –í—ã –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç–µ –∫–æ—Ñ–µ, –≤–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—ã–µ –¥–≤–µ —Ü–∏—Ñ—Ä—ã —Å–≤–æ–µ–π –∫–∞—Ä—Ç—ã, '
                             '–ø–æ—Ç–æ–º 4 –∑–≤–µ–∑–¥–æ—á–∫–∏ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —á–µ—Ç—ã—Ä–µ —Ü–∏—Ñ—Ä—ã –∫–∞—Ä—Ç—ã, \n–Ω–∞–ø—Ä–∏–º–µ—Ä: 22****7192')
        await message.answer('–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:', reply_markup=cancel_registration)
        await Registration.number.set()
    else:  # –ï—Å–ª–∏ –∫–∞—Ä—Ç—ã —É–∂–µ –µ—Å—Ç—å ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
        card_list = "\n".join([f"{c['card_number']} ‚Äî {c['card_name']}" for c in cards])
        await message.answer(f'–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n–í–∞—à–∏ –∫–∞—Ä—Ç—ã:\n{card_list}\n'
                             f'–ï—Å–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç—É, –≤—ã–±–µ—Ä–∏—Ç–µ –≤ –º–µ–Ω—é –ø—É–Ω–∫—Ç /cards')


@dp.message_handler(state=Registration.number)
async def get_number(message: types.Message, state: FSMContext):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã.
    –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —à–∞–≥ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∫–∞—Ä—Ç—ã.
    """
    number = message.text
    if number == "–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é":
        await state.finish()
        await message.answer('–û—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=kb_main)
    else:
        if validate_number(number):
            await state.update_data(card_number=number)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –≤ FSM
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è —ç—Ç–æ–π –∫–∞—Ä—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–†–∞–±–æ—á–∞—è', '–õ–∏—á–Ω–∞—è', '–ö–æ—Ñ–µ–π–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç —É –≤—Ö–æ–¥–∞'):")
            await Registration.name.set()
        else:
            await message.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü—Ä–∏–º–µ—Ä: 22****7192:', reply_markup=cancel_registration)


@dp.message_handler(state=Registration.name)
async def get_card_name_reg(message: types.Message, state: FSMContext):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–º—è –∫–∞—Ä—Ç—ã –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–∞—Ä—Ç—É –≤ –ë–î.
    –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –±–æ–Ω—É—Å–Ω—ã–π ID, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å.
    """
    user_id = int(message.from_user.id)
    name = message.text.strip()
    data = await state.get_data()
    number = data.get("card_number")

    if not validate_number(number):
        await message.answer('–û—à–∏–±–∫–∞: –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å /register')
        await state.finish()
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ä—Ç—É –≤ —Ç–∞–±–ª–∏—Ü—É Cards
    from utils.db_api.cards_commands import add_user_card
    await add_user_card(user_id, number, name)

    await state.finish()

    from utils.db_api.ie_commands import get_user_data
    from data.config import ADMIN_IE

    user_data = await get_user_data(ADMIN_IE)
    token = user_data["token"]

    bonus_items = await fetch_bonus_accounts_by_card(token, number)
    if not bonus_items:
        await message.answer(
            "üî∏ –ë–æ–Ω—É—Å—ã –ø–æ–∫–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã.\n\n"
            "‚úÖ –°–æ–≤–µ—Ä—à–∏—Ç–µ –ø–æ–∫—É–ø–∫—É –Ω–∞ –∫–∞—Å—Å–µ –∏–ª–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ, —á—Ç–æ–±—ã –±–æ–Ω—É—Å–Ω–∞—è –∫–∞—Ä—Ç–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∞—Å—å.\n"
            "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –±–æ—Ç–∞."
        )
        return

    keyboard = InlineKeyboardMarkup(row_width=1)
    options = 0
    for item in bonus_items:
        bonus_id = item["id"]
        already_used = await get_user_by_bonus_id(bonus_id)
        if already_used:
            continue
        balance = item["balance"] / 100
        keyboard.add(
            InlineKeyboardButton(
                text=f"{item['card_number']} ‚Äî {balance:.2f} ‚ÇΩ",
                callback_data=f"bind_bonus:{bonus_id}:{number}"
            )
        )
        options += 1

    if options:
        await message.answer(
            "üßæ –ú—ã –Ω–∞—à–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–æ–Ω—É—Å–Ω—ã—Ö –∫–∞—Ä—Ç, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–¥ –≤–∞—à –Ω–æ–º–µ—Ä.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é, —Å–≤–µ—Ä—è—è –±–∞–ª–∞–Ω—Å —Å —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–º –æ–ø–ª–∞—Ç—ã:",
            reply_markup=keyboard
        )
    else:
        await message.answer("‚ùóÔ∏è–í—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –±–æ–Ω—É—Å–Ω—ã–µ ID —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")


def validate_number(number):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ –∫–∞—Ä—Ç—ã: 22****1234."""
    pattern = r'^\d{2}\*\*\*\*\d{4}$'
    return re.match(pattern, number) is not None


@dp.message_handler(text='–¥–∞')
async def ask_for_phone(message: types.Message):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –°–ú–° —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    await message.answer('–ù–∞ –∫–∞–∫–æ–π –Ω–æ–º–µ—Ä –í—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–ª—É—á–∞—Ç—å –°–ú–° —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è?')
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 89886654411:', reply_markup=cancel_registration)
    await Registration.phone.set()


@dp.message_handler(state=Registration.phone)
async def get_phone(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    phone = message.text
    if phone == "–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é":
        await state.finish()
        await message.answer('–û—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=kb_main)
    else:
        user_id = int(message.from_user.id)
        if validate_phone(phone):
            await update_phone_number(user_id, phone)
            await update_sms_status(user_id, True)
            await message.answer('–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ telegram –∏ –ø–æ –°–ú–°\n'
                                 '–ï—Å–ª–∏ –≤—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –°–ú–°, –≤ –º–µ–Ω—é –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç "–°–ú–° —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"')
            await new_user_registration(dp=dp, username=message.from_user.username)
            await state.finish()
        else:
            await message.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü—Ä–∏–º–µ—Ä: 89886654411:', reply_markup=cancel_registration)


def validate_phone(phone):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: 89XXXXXXXXX."""
    pattern = r'^89\d{9}$'
    return re.match(pattern, phone) is not None


@dp.message_handler(text='–Ω–µ—Ç')
async def skip_phone(message: types.Message, state: FSMContext):
    """–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Ö–æ—á–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –°–ú–° ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é."""
    await message.answer('üëç–û—Ç–ª–∏—á–Ω–æ! –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Ç–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–∞–ª–∞–Ω—Å–µ '
                         '–±–æ–Ω—É—Å–æ–≤ –≤ telegram –±–æ—Ç–µ!üì≤')
    await new_user_registration(dp=dp, username=message.from_user.username)
    await state.finish()
