import asyncio
import aiohttp
from datetime import datetime
from loguru import logger

from data.config import CODER, ADMIN_IE
from utils.db_api.ie_commands import change_last_time, get_last_time, get_user_data
from utils.db_api.users_commands import get_user_id_by_card_number, update_bonus
from loader import bot

API_URL = "https://api.vendista.ru:99/bonusaccounts"


def format_now() -> str:
    """–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫–∏."""
    return datetime.now().strftime("%d.%m.%Y %H:%M:%S")


async def parse_iso_datetime(iso_str: str) -> str:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç ISO-–≤—Ä–µ–º—è –∏–∑ API –≤ —Ñ–æ—Ä–º–∞—Ç DD.MM.YYYY HH:MM:SS"""
    dt = datetime.fromisoformat(iso_str)
    return dt.strftime("%d.%m.%Y %H:%M:%S")


async def should_update(sale_time: str, db_time: str) -> bool:
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è –ø—Ä–æ–¥–∞–∂–∏ –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è."""
    t1 = datetime.strptime(sale_time, '%d.%m.%Y %H:%M:%S')
    t2 = datetime.strptime(db_time, '%d.%m.%Y %H:%M:%S')
    return t1 > t2


async def format_bonus(bonus: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –±–æ–Ω—É—Å—ã –≤ —Å—Ç—Ä–æ–∫—É —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –∏ –∑–∞–ø—è—Ç–æ–π."""
    return f"{bonus / 100:,.2f}".replace(",", " ").replace(".", ",")


class BonusUpdater:
    def __init__(self, token: str):
        self.token = token

    async def fetch_data(self) -> list[dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –±–æ–Ω—É—Å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ API."""
        async with aiohttp.ClientSession() as session:
            params = {
                "token": self.token,
                "OrderByColumn": 3,
                "OrderDesc": 'true'
            }
            async with session.get(API_URL, params=params) as resp:
                if resp.status == 200:
                    return (await resp.json())["items"]
                logger.error(f"API request failed with status {resp.status}")
                return []

    async def process_user_data(self, user_data: dict):
        user_id = user_data["user_id"]


        try:
            while True:
                now_str = format_now()
                last_check = await get_last_time(user_id)
                # last_check = "02.06.2025 00:38:33"

                items = await self.fetch_data()

                for item in items:
                    card_number = item["card_number"]
                    balance = item["balance"]
                    sale_time_raw = item["last_change_time"]

                    sale_time = await parse_iso_datetime(sale_time_raw)

                    if await should_update(sale_time, last_check):
                        user = await get_user_id_by_card_number(card_number)
                        if user:
                            await update_bonus(user, card_number, balance / 100)
                            bonus = await format_bonus(balance)
                            msg = f"üí≥ –ö–∞—Ä—Ç–∞: {card_number}\n–ë–æ–Ω—É—Å—ã: {bonus} ‚ÇΩ"
                            # print(msg)
                            await bot.send_message(user, msg)
                            # await bot.send_message(CODER, f"{user}\n{msg}")

                await change_last_time(user_id, now_str)
                await asyncio.sleep(30)

        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–æ–Ω—É—Å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            await change_last_time(user_id, format_now())
            await bot.send_message(CODER, "‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –±–æ–Ω—É—Å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")


async def start_user():
    user_data = await get_user_data(ADMIN_IE)
    updater = BonusUpdater(token=user_data["token"])
    try:
        await updater.process_user_data(user_data)
    except asyncio.CancelledError:
        pass  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
