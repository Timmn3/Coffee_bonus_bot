"""
–•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–ø—Ä–æ—Å–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.

–§—É–Ω–∫—Ü–∏–∏:
- /poll_results ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ–¥–Ω–∏—Ö N –æ–ø—Ä–æ—Å–æ–≤
- –ö–Ω–æ–ø–∫–∞ "–û–±–Ω–æ–≤–∏—Ç—å" ‚Äî –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞ –≤ —Ç–µ–∫—É—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
- –ö–Ω–æ–ø–∫–∞ "–ó–∞–∫—Ä—ã—Ç—å" ‚Äî —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
"""

from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher import FSMContext

from data.config import ADMIN_IE
from loader import dp
from utils.db_api.shemas.polls import Polls
from utils.db_api.poll_commands import build_stats_text, get_poll


# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã callback_data
POLL_STAT_REFRESH = "poll_stat_refresh"
POLL_STAT_CLOSE = "poll_stat_close"

def _build_stat_kb(poll_id: int) -> InlineKeyboardMarkup:
    """–°–æ–±—Ä–∞—Ç—å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –±–ª–æ–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–ø—Ä–æ—Å–∞."""
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton(
            text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
            callback_data=f"{POLL_STAT_REFRESH}:{poll_id}"
        ),
        InlineKeyboardButton(
            text="‚úñ –ó–∞–∫—Ä—ã—Ç—å",
            callback_data=f"{POLL_STAT_CLOSE}:{poll_id}"
        ),
    )
    return kb


@dp.message_handler(commands=["poll_results"], chat_id=ADMIN_IE)
async def cmd_poll_results(message: types.Message, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–ø—Ä–æ—Å–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."""
    # –°–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–ø—Ä–æ—Å–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å
    limit = 10

    polls = await Polls.query.order_by(Polls.id.desc()).limit(limit).gino.all()
    if not polls:
        await message.answer("–û–ø—Ä–æ—Å–æ–≤ –µ—â—ë –Ω–µ—Ç.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ –æ–¥–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –Ω–∞ –æ–ø—Ä–æ—Å ‚Äî –Ω–∞–≥–ª—è–¥–Ω–æ –∏ —É–¥–æ–±–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å
    for poll in polls:
        stats_text, total = build_stats_text(poll.question, poll.options or [], poll.votes or [])
        suffix = f"\n\n<b>–í—Å–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤:</b> {total}"
        await message.answer(
            stats_text + suffix,
            reply_markup=_build_stat_kb(poll.id),
            parse_mode="HTML"
        )


@dp.callback_query_handler(lambda c: c.data and c.data.startswith(f"{POLL_STAT_REFRESH}:"),
                           chat_id=ADMIN_IE)
async def cb_poll_stat_refresh(call: types.CallbackQuery) -> None:
    """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞ –≤ —Ç–µ–∫—É—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏."""
    try:
        _, poll_id_str = call.data.split(":")
        poll_id = int(poll_id_str)
    except Exception:
        await call.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
        return

    poll = await get_poll(poll_id)
    if not poll:
        await call.answer("–û–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    stats_text, total = build_stats_text(poll.question, poll.options or [], poll.votes or [])
    suffix = f"\n\n<b>–í—Å–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤:</b> {total}"
    try:
        await call.message.edit_text(
            stats_text + suffix,
            reply_markup=_build_stat_kb(poll.id),
            parse_mode="HTML"
        )
        await call.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    except Exception:
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–≤–ø–∞–ª, Telegram –º–æ–∂–µ—Ç —Ä—É–≥–Ω—É—Ç—å—Å—è ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç–∏–º
        await call.answer("–ê–∫—Ç—É–∞–ª—å–Ω–æ.")


@dp.callback_query_handler(lambda c: c.data and c.data.startswith(f"{POLL_STAT_CLOSE}:"),
                           chat_id=ADMIN_IE)
async def cb_poll_stat_close(call: types.CallbackQuery) -> None:
    """–ó–∞–∫—Ä—ã—Ç—å (—É–¥–∞–ª–∏—Ç—å) —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π."""
    try:
        await call.message.delete()
    except Exception:
        pass
    await call.answer()
