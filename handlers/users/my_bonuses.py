"""
–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–æ–Ω—É—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
–†–∞–±–æ—Ç–∞–µ—Ç —Å —Ç–∞–±–ª–∏—Ü–µ–π 'cards' –∏ API –±–æ–Ω—É—Å–Ω—ã—Ö —Å—á–µ—Ç–æ–≤.
"""
import aiohttp
from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from loader import dp
from utils.db_api.cards_commands import get_user_cards, get_card_by_number, update_bonus
from utils.db_api.bonus_commands import fetch_bonus_accounts_by_card, get_user_by_bonus_id, set_bonus_account_id
from utils.db_api.shemas.cards import Cards


@dp.message_handler(text=["/my_bonuses", "–ú–æ–∏ –±–æ–Ω—É—Å—ã"])
async def my_bonuses(message: types.Message):
    user_id = message.from_user.id
    cards = await get_user_cards(user_id)

    if not cards:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç.')
        return

    if len(cards) > 1:
        keyboard = InlineKeyboardMarkup(row_width=1)
        for card in cards:
            button_text = f"{card['card_number']} ‚Äî {card['card_name']}"
            keyboard.add(
                InlineKeyboardButton(
                    text=button_text,
                    callback_data=f"card:{card['card_number']}"
                )
            )
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–æ–Ω—É—Å–æ–≤:", reply_markup=keyboard)
    else:
        card_number = cards[0]['card_number']
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º bonus_account_id –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        await check_and_bind_bonus_account(user_id, card_number, message)
        bonus = await get_bonus_api(card_number)
        await show_bonus_info(message, card_number, bonus)


@dp.callback_query_handler(lambda c: c.data.startswith('card:'))
async def process_callback_card(callback_query: types.CallbackQuery):
    selected_card = callback_query.data.split(':', 1)[1]
    user_id = callback_query.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º bonus_account_id –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    await check_and_bind_bonus_account(user_id, selected_card, callback_query.message)

    bonus = await get_bonus_api(selected_card)
    text = (
        f'–ö–∞—Ä—Ç–∞: <code>{selected_card}</code>\n'
        f'–ë–æ–Ω—É—Å—ã: {bonus} ‚ÇΩ'
    )

    await callback_query.message.edit_text(text, parse_mode='HTML')
    await callback_query.answer()


async def show_bonus_info(message: types.Message, card_number: str, bonus: float):
    await message.answer(
        f'–£ –í–∞—Å {bonus} –±–æ–Ω—É—Å–æ–≤‚úÖ\n'
        f'<b>1 –±–æ–Ω—É—Å = 1 —Ä—É–±–ª—é!</b>\n'
        f'–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω–∞–ø–∏—Ç–æ–∫ –∏ –ø—Ä–∏–ª–æ–∂–∏—Ç—å –∫–∞—Ä—Ç—É –∫–∞–∫ –æ–±—ã—á–Ω–æ –∫ —Ç–µ—Ä–º–∏–Ω–∞–ª—É!\n'
        f'–ü—Ä–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–º –Ω–∞–ª–∏—á–∏–∏ –±–æ–Ω—É—Å–æ–≤ –¥–µ–Ω—å–≥–∏ –Ω–µ —Å–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –∏ —É –í–∞—Å –±—É–¥–µ—Ç –Ω–∞–ø–∏—Å–∞–Ω–æ '
        f'<b>"–±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞"!</b>', parse_mode="HTML"
    )


@dp.callback_query_handler(lambda c: c.data.startswith("bind_bonus:"))
async def bind_bonus_id(call: types.CallbackQuery):
    """
    –ü—Ä–∏–≤—è–∑–∫–∞ –±–æ–Ω—É—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    try:
        _, bonus_id_str, card_number = call.data.split(":")
        bonus_id = int(bonus_id_str)
    except ValueError:
        await call.message.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏.")
        return

    user_id = call.from_user.id

    exists = await get_user_by_bonus_id(bonus_id)
    if exists and exists != user_id:
        await call.message.edit_text("‚ùå –≠—Ç–æ—Ç –±–æ–Ω—É—Å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        return

    success = await set_bonus_account_id(user_id, bonus_id, card_number)
    if success is True:
        await call.message.edit_text("‚úÖ –ë–æ–Ω—É—Å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω! –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –±–æ–Ω—É—Å—ã.")
    elif success is False:
        await call.message.edit_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤—è–∑–∞—Ç—å –±–æ–Ω—É—Å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    # –ï—Å–ª–∏ —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω–æ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –ø–∏—à–µ–º




async def get_bonus_api(card_number: str) -> float:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã –ø–æ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–º—É –±–æ–Ω—É—Å–Ω–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É —ç—Ç–æ–π –∫–∞—Ä—Ç—ã.
    """
    from utils.db_api.ie_commands import get_user_data
    from data.config import ADMIN_IE
    from utils.db_api.cards_commands import get_card_by_number, update_bonus

    user_data = await get_user_data(ADMIN_IE)
    token = user_data.get("token")

    if not token:
        return 0.0

    # 1. –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—É –∏ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π bonus_account_id
    card = await get_card_by_number(card_number)
    if not card or not card.bonus_account_id:
        return 0.0

    bonus_id = card.bonus_account_id

    # 2. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ –∫–∞—Ä—Ç–µ
    matches = await fetch_bonus_accounts_by_card(token, card_number)
    if not matches:
        return 0.0

    # 3. –ò—â–µ–º –Ω—É–∂–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –ø–æ ID
    for item in matches:
        if item["id"] == bonus_id:
            balance = item["balance"] / 100
            await update_bonus(card.user_id, card_number, balance)
            return balance

    return 0.0




async def check_and_bind_bonus_account(user_id: int, card_number: str, message: types.Message):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç bonus_account_id –∫ –∫–∞—Ä—Ç–µ, –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω.

    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
    :param card_number: –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    """
    from utils.db_api.ie_commands import get_user_data
    from data.config import ADMIN_IE

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π bonus_account_id –∫ —ç—Ç–æ–π –∫–∞—Ä—Ç–µ
    card = await Cards.query.where(
        (Cards.user_id == user_id) &
        (Cards.card_number == card_number)
    ).gino.first()

    if card and card.bonus_account_id:
        return True  # –£–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω

    # –ï—Å–ª–∏ –Ω–µ—Ç - –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
    user_data = await get_user_data(ADMIN_IE)
    token = user_data.get("token")

    if not token:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
        return False

    bonus_items = await fetch_bonus_accounts_by_card(token, card_number)

    if not bonus_items:
        await message.answer("üî∏ –ë–æ–Ω—É—Å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —ç—Ç–æ–π –∫–∞—Ä—Ç—ã.")
        return False

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
    available_accounts = []
    for item in bonus_items:
        exists = await get_user_by_bonus_id(item["id"])
        if not exists or exists == user_id:
            available_accounts.append(item)

    if not available_accounts:
        await message.answer("‚ùóÔ∏è –í—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –±–æ–Ω—É—Å–Ω—ã–µ ID —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
        return False

    # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç - –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    if len(available_accounts) == 1:
        account = available_accounts[0]
        result = await set_bonus_account_id(user_id, account["id"], card_number)

        if result is True:
            await message.answer(f"‚úÖ –ë–æ–Ω—É—Å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫–∞—Ä—Ç–µ {card_number}!")
        elif result is False:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤—è–∑–∞—Ç—å –±–æ–Ω—É—Å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç.")
        # –µ—Å–ª–∏ result is None ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –ø–∏—à–µ–º

        return bool(result)

    # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä
    keyboard = InlineKeyboardMarkup(row_width=1)
    for account in available_accounts:
        balance = account["balance"] / 100
        keyboard.add(
            InlineKeyboardButton(
                text=f"{account['card_number']} ‚Äî {balance:.2f} ‚ÇΩ",
                callback_data=f"bind_bonus:{account['id']}:{account['card_number']}"
            )
        )

    await message.answer(
        "üßæ –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–æ–Ω—É—Å–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–π –∫–∞—Ä—Ç—ã.\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π:",
        reply_markup=keyboard
    )
    return False