import logging

from aiogram import Dispatcher, types
from aiogram.utils.exceptions import TelegramAPIError

from data.config import CODER, ADMIN_IE, PAYMENT_CARD
from loguru import logger

from loader import dp
from utils.db_api.users_commands import count_users


async def on_startup_notufy(dp: Dispatcher):
    try:
        text = '–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω'
        await dp.bot.send_message(chat_id=CODER, text=text)
    except Exception as err:
        logging.exception(err)


# –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º –æ –Ω–æ–≤–æ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
async def new_user_registration(dp: Dispatcher, username):
    count = await count_users()
    try:
        message = (
            f'‚úÖ–í –±–æ–Ω—É—Å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: \n'
            f'username: @{username}\n'
            f'üöπ–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{count}</b>'
        )

        for admin_id in [CODER, ADMIN_IE]:
            await dp.bot.send_message(chat_id=admin_id, text=message, parse_mode='HTML')

    except Exception as err:
        logger.exception(err)


async def send_admins(dp: Dispatcher, text):
    try:
        await dp.bot.send_message(chat_id=CODER, text=text)
    except Exception as err:
        logger.exception(err)


async def send_monthly_payment_reminder():
    try:
        ikb_payment = types.InlineKeyboardMarkup(row_width=1).add(
            types.InlineKeyboardButton("–û–ø–ª–∞—Ç–∞ –≤–Ω–µ—Å–µ–Ω–∞", callback_data="payment_made")
        )
        await dp.bot.send_message(
            chat_id=ADMIN_IE,
            text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–Ω–µ—Å—Ç–∏ –∞–±–æ–Ω–µ–Ω—Ç—Å–∫—É—é –ø–ª–∞—Ç—É 1000 ‚ÇΩ –Ω–∞ –∫–∞—Ä—Ç—É:\n"
                 f"üí≥ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: `{PAYMENT_CARD}`\n"
                 f"–ó–∞–≤—Ç—Ä–∞ –±—É–¥–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –¥–ª—è –æ–ø–ª–∞—Ç—ã.",
            reply_markup=ikb_payment,
            parse_mode="Markdown"
        )
        logger.info("–ï–∂–µ–º–µ—Å—è—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–ª–∞—Ç–µ–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")

# –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è —á–µ–∫–∞
waiting_for_receipt = {}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∞ –≤–Ω–µ—Å–µ–Ω–∞"
@dp.callback_query_handler(text="payment_made")
async def handle_payment_made(callback_query: types.CallbackQuery):
    try:
        # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –ø—Ä–æ—Å–∏–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫
        await callback_query.message.edit_reply_markup()
        await callback_query.message.answer("üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ.")
        waiting_for_receipt[callback_query.from_user.id] = True  # –í–∫–ª—é—á–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ —á–µ–∫–∞
        await callback_query.answer()
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–û–ø–ª–∞—Ç–∞ –≤–Ω–µ—Å–µ–Ω–∞': {e}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–∞–π–ª–∞ (—á–µ–∫–∞)
@dp.message_handler(content_types=[types.ContentType.PHOTO, types.ContentType.DOCUMENT])
async def handle_receipt(message: types.Message):
    user_id = message.from_user.id

    if user_id in waiting_for_receipt and waiting_for_receipt[user_id]:
        try:
            # –û—Ç–∫–ª—é—á–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è
            waiting_for_receipt[user_id] = False

            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —á–µ–∫ –∞–¥–º–∏–Ω—É (CODER)
            await message.forward(chat_id=CODER)

            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await message.answer("‚úÖ –ß–µ–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞.")
        except TelegramAPIError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —á–µ–∫–∞: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–µ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
    else:
        # –ï—Å–ª–∏ –Ω–µ –æ–∂–∏–¥–∞–µ–º —á–µ–∫ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        pass