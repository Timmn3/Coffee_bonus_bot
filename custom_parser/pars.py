import asyncio
import aiohttp
from datetime import datetime
from loguru import logger

from data.config import CODER, ADMIN_IE
from handlers.users.bot_registration import get_card_name_reg
from utils.db_api.cards_commands import update_bonus
from utils.db_api.ie_commands import change_last_time, get_last_time, get_user_data
from utils.db_api.bonus_commands import get_user_by_bonus_id, set_bonus_account_id, get_card_name_by_number

from loader import bot
from utils.db_api.users_commands import get_bonus_account_id, get_user_id_by_card_number


API_URL = "https://api.vendista.ru:99/bonusaccounts"


def format_now() -> str:
    """–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫–∏."""
    return datetime.now().strftime("%d.%m.%Y %H:%M:%S")


async def parse_iso_datetime(iso_str: str) -> str:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç ISO-–≤—Ä–µ–º—è –∏–∑ API –≤ —Ñ–æ—Ä–º–∞—Ç DD.MM.YYYY HH:MM:SS"""
    dt = datetime.fromisoformat(iso_str)
    return dt.strftime("%d.%m.%Y %H:%M:%S")


async def should_update(sale_time: str, db_time: str) -> bool:
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è –ø—Ä–æ–¥–∞–∂–∏ –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è."""
    t1 = datetime.strptime(sale_time, '%d.%m.%Y %H:%M:%S')
    t2 = datetime.strptime(db_time, '%d.%m.%Y %H:%M:%S')
    return t1 > t2


async def format_bonus(bonus: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –±–æ–Ω—É—Å—ã –≤ —Å—Ç—Ä–æ–∫—É —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –∏ –∑–∞–ø—è—Ç–æ–π."""
    return f"{bonus / 100:,.2f}".replace(",", " ").replace(".", ",")


class BonusUpdater:
    def __init__(self, token: str):
        self.token = token

    async def fetch_data(self) -> list[dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –±–æ–Ω—É—Å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ API."""
        async with aiohttp.ClientSession() as session:
            params = {
                "token": self.token,
                "OrderByColumn": 3,
                "OrderDesc": 'true'
            }
            async with session.get(API_URL, params=params) as resp:
                if resp.status == 200:
                    return (await resp.json())["items"]
                logger.error(f"API request failed with status {resp.status}")
                return []

    async def process_user_data(self, user_data: dict):
        user_id = user_data["user_id"]

        try:
            while True:
                now_str = format_now()
                last_check = await get_last_time(user_id)

                bonus_account_id = await get_bonus_account_id(user_id)

                items = []

                if bonus_account_id:
                    # üîπ –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ ID
                    url = f"{API_URL}/{bonus_account_id}/transactions"
                    async with aiohttp.ClientSession() as session:
                        params = {"token": self.token}
                        async with session.get(url, params=params) as resp:
                            if resp.status == 200:
                                items = await resp.json()
                            else:
                                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π ID {bonus_account_id}: {resp.status}")
                else:
                    # üî∏ –°—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–±: –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç –∏ –±–æ–Ω—É—Å–æ–≤
                    items = await self.fetch_data()

                for item in items:
                    card_number = item["card_number"]
                    balance = item["balance"]
                    sale_time_raw = item.get("last_change_time") or item.get("sale_time")  # –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
                    bonus_id = item.get("id")  # —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –≤ –ë–î

                    sale_time = await parse_iso_datetime(sale_time_raw)

                    if await should_update(sale_time, last_check):
                        user = await get_user_id_by_card_number(card_number)
                        if user:
                            await update_bonus(user, card_number, balance / 100)
                            bonus = await format_bonus(balance)
                            card_name = await get_card_name_by_number(user, card_number)
                            msg = f"üí≥ <b>{card_name}</b> ‚Äî {card_number}\nüí∞ –ë–æ–Ω—É—Å—ã: {bonus} ‚ÇΩ"
                            await bot.send_message(user, msg)
                            await bot.send_message(CODER, msg)

                            # üîπ –ü—Ä–∏–≤—è–∑–∫–∞ bonus_account_id –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏
                            if not bonus_account_id and bonus_id:
                                exists = await get_user_by_bonus_id(bonus_id)
                                if not exists:
                                    await set_bonus_account_id(user_id, bonus_id, card_number)


                await change_last_time(user_id, now_str)
                await asyncio.sleep(30)

        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –±–æ–Ω—É—Å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö {e}")
            await change_last_time(user_id, format_now())
            await bot.send_message(CODER, f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –±–æ–Ω—É—Å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö {e}")


async def start_user():
    user_data = await get_user_data(ADMIN_IE)
    updater = BonusUpdater(token=user_data["token"])
    try:
        await updater.process_user_data(user_data)
    except asyncio.CancelledError:
        pass  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
