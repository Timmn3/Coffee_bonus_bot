import asyncio
import logging
import json
from datetime import datetime

from utils.db_api.shemas.cards import Cards
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π —Å–≤–æ–∏ –º–æ–¥–µ–ª–∏
from utils.db_api.shemas.users import Users
from loguru import logger


async def migrate_user_cards():
    """
    –ü–µ—Ä–µ–Ω–æ—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ –æ –∫–∞—Ä—Ç–∞—Ö –∏–∑ –ø–æ–ª—è JSON/TEXT –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É cards.
    """
    logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –∫–∞—Ä—Ç...")
    users = await Users.query.gino.all()

    for user in users:
        try:
            if not user.card_number or user.card_number == '0':
                continue

            # –†–∞–∑–±–∏—Ä–∞–µ–º –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç
            card_numbers = [c.strip() for c in user.card_number.split('\n') if c.strip()]
            name_cards = user.name_cards or {}

            for card in card_numbers:
                card_name = name_cards.get(card, '')  # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∫–∞—Ä—Ç—ã –∏–∑ JSON

                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ cards
                await Cards.create(
                    user_id=user.user_id,
                    card_number=card,
                    card_name=card_name,
                    bonus_account_id=None,
                    created_at=datetime.now(),
                    active=True,
                    bonus=0
                )
                logger.debug(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞—Ä—Ç–∞ {card} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.user_id}")

        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.user_id}:")
            continue

    logger.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.run_until_complete(migrate_user_cards())