"""
–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start.
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–≤–µ—Ä–∫—É –µ–≥–æ –±–æ–Ω—É—Å–Ω—ã—Ö –∫–∞—Ä—Ç.
"""

from aiogram import types
from aiogram.dispatcher.filters import CommandStart
from filters import IsPrivate
from loader import dp
from utils.db_api.bonus_commands import get_user_by_bonus_id
from utils.db_api.users_commands import select_user, add_user
from utils.db_api.ie_commands import get_user_data
from data.config import ADMIN_IE
from keyboards.default import kb_main, kb_register_machine
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from loguru import logger


@dp.message_handler(IsPrivate(), CommandStart())
async def command_start(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î, –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º,
    –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –±–æ–Ω—É—Å–Ω—ã—Ö –∫–∞—Ä—Ç –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """
    args = message.get_args()  # –ê—Ä–≥—É–º–µ–Ω—Ç—ã –ø–æ—Å–ª–µ /start (–Ω–∞–ø—Ä–∏–º–µ—Ä —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π ID)

    try:
        user = await select_user(message.from_user.id)

        if user is None:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
            await add_user(
                user_id=message.from_user.id,
                tg_first_name=message.from_user.first_name,
                tg_last_name=message.from_user.last_name,
                name=message.from_user.username,
                phone_number='0',
                status='active',
                bonus={},
                number_ie=10,
                sms_status=False
            )
            await message.answer(
                f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}!\n'
                f'–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"',
                reply_markup=kb_register_machine
            )
            return

        if user.status == 'active':
            await message.answer(f'–ü—Ä–∏–≤–µ—Ç {user.tg_first_name}!\n', reply_markup=kb_main)

            # üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤—è–∑–∫—É –±–æ–Ω—É—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            from utils.db_api.cards_commands import get_user_cards
            from utils.db_api.bonus_commands import fetch_bonus_accounts_by_card

            user_cards = await get_user_cards(user.user_id)

            if user_cards:
                user_data = await get_user_data(ADMIN_IE)
                token = user_data["token"]

                all_items = []
                for card in user_cards:
                    matches = await fetch_bonus_accounts_by_card(token, card['card_number'])
                    all_items.extend(matches)

                keyboard = InlineKeyboardMarkup(row_width=1)
                options = 0
                for item in all_items:
                    b_id = item["id"]
                    already = await get_user_by_bonus_id(b_id)
                    if already:
                        continue
                    bal = item["balance"] / 100
                    keyboard.add(
                        InlineKeyboardButton(
                            text=f"{item['card_number']} ‚Äî {bal:.2f} ‚ÇΩ",
                            callback_data=f"bind_bonus:{b_id}"
                        )
                    )
                    options += 1

                if options > 0:
                    from utils.db_api.cards_commands import get_card_by_number
                    unlinked_cards = []
                    for item in all_items:
                        card = await get_card_by_number(item["card_number"])
                        if card and not card.bonus_account_id:
                            unlinked_cards.append(item["card_number"])

                    if unlinked_cards:
                        await message.answer(
                            "üìå –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–≤–æ–π –±–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å.\n"
                            "–°—Ä–∞–≤–Ω–∏—Ç–µ —Å—É–º–º—É –±–æ–Ω—É—Å–æ–≤ —Å —Ç–µ–º, —á—Ç–æ –≤—ã –≤–∏–¥–∏—Ç–µ –Ω–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç:",
                            reply_markup=keyboard
                        )

        else:
            await message.answer(f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.tg_first_name}!\n')
            await message.answer(f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é', reply_markup=kb_register_machine)

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /start: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
