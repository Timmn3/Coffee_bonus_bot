""" –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π –∫–∞—Ä—Ç—ã """
import html
import re
from aiogram import types

from keyboards.default import kb_main
from loader import dp
from utils.db_api.users_commands import get_card_number_by_user_id, update_card_number, remove_card_number
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher import FSMContext
from utils.db_api.users_commands import (
    get_name_cards,
    set_card_name,
    rename_card_number
)
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton


class Cards(StatesGroup):
    number = State()
    number_delete = State()
    edit_select = State()
    edit_number = State()
    edit_name = State()
    new_name = State()


kb_cards = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç—É"),
            KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É"),
            KeyboardButton(text="O—Ç–º–µ–Ω–∞"),
        ],

    ],
    resize_keyboard=True,
    one_time_keyboard=True
)


cards_cancel = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="O—Ç–º–µ–Ω–∞"),
        ],

    ],
    resize_keyboard=True,
    one_time_keyboard=True
)


@dp.message_handler(text='O—Ç–º–µ–Ω–∞')
async def cast(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer('–û—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=kb_main)


@dp.message_handler(text='/cards')
async def cards_change(message: types.Message):
    user_id = int(message.from_user.id)
    cards = await get_card_number_by_user_id(user_id)
    names = await get_name_cards(user_id)

    if cards == '0':
        await message.answer('–£ –í–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ä—Ç, –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é /register')
    else:
        lines = []
        for card in cards.split('\n'):
            if card.strip():
                name = names.get(card.strip(), '‚Äî')
                lines.append(f"{card.strip()} ‚Äî <i>{name}</i>")
        text = "<b>–í–∞—à–∏ –∫–∞—Ä—Ç—ã:</b>\n" + "\n".join(lines)

        kb = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç—É"),
                 KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É")],
                [KeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É")],
                [KeyboardButton(text="O—Ç–º–µ–Ω–∞")]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await message.answer(text, reply_markup=kb)

@dp.message_handler(text='‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É')
async def edit_card_start(message: types.Message, state: FSMContext):
    user_id = int(message.from_user.id)
    cards_raw = await get_card_number_by_user_id(user_id)
    name_cards = await get_name_cards(user_id)

    card_list = [c.strip() for c in cards_raw.split('\n') if c.strip()]
    if not card_list:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ä—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return

    keyboard = InlineKeyboardMarkup(row_width=1)
    for card in card_list:
        name = name_cards.get(card, '‚Äî')
        button_text = f"{card} ‚Äî {name}"
        keyboard.add(InlineKeyboardButton(text=button_text, callback_data=f"edit_card:{card}"))

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:", reply_markup=keyboard)
    await state.finish()  # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ —Å–ª—É—á–∞–π —Å—Ç–∞—Ä—ã—Ö FSM

@dp.callback_query_handler(lambda c: c.data.startswith('edit_card:'))
async def handle_edit_card_callback(call: types.CallbackQuery, state: FSMContext):
    card = call.data.split(':', 1)[1]
    await state.update_data(old_card=card)

    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä", callback_data="edit_number"),
        InlineKeyboardButton(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data="edit_name")
    )

    await call.message.answer(f"–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–ª—è –∫–∞—Ä—Ç—ã <code>{card}</code>?", reply_markup=keyboard)
    await call.answer()

@dp.callback_query_handler(text="edit_number")
async def edit_number_selected(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    card = data.get("old_card")
    await call.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –¥–ª—è –∫–∞—Ä—Ç—ã <code>{card}</code>:", reply_markup=cards_cancel)
    await Cards.edit_number.set()
    await call.answer()


@dp.callback_query_handler(text="edit_name")
async def edit_name_selected(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    card = data.get("old_card")
    await call.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è –∫–∞—Ä—Ç—ã <code>{card}</code>:", reply_markup=cards_cancel)
    await Cards.edit_name.set()
    await state.update_data(new_card=card)  # –≤–∞–∂–Ω–æ: new_card = —Ç–æ—Ç –∂–µ –Ω–æ–º–µ—Ä, –µ—Å–ª–∏ –∏–º—è –º–µ–Ω—è–µ–º
    await call.answer()


@dp.message_handler(state=Cards.edit_number)
async def edit_card_number(message: types.Message, state: FSMContext):
    new_number = message.text.strip()
    if validate_number(new_number):
        await state.update_data(new_card=new_number)
        await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è –∫–∞—Ä—Ç—ã:")
        await Cards.edit_name.set()
    else:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 22****7192', reply_markup=cards_cancel)


@dp.message_handler(state=Cards.edit_name)
async def edit_card_name(message: types.Message, state: FSMContext):
    name = message.text.strip()
    data = await state.get_data()
    old_card = data['old_card']
    new_card = data['new_card']
    user_id = message.from_user.id

    await remove_card_number(user_id, old_card)
    await update_card_number(user_id, new_card)
    await rename_card_number(user_id, old_card, new_card)
    await set_card_name(user_id, new_card, name)

    await state.finish()
    await message.answer(f'–ö–∞—Ä—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:\n{new_card} ‚Äî <i>{html.escape(name)}</i>')


@dp.message_handler(text='–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É')
async def register(message: types.Message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: <code>22****3317</code>', parse_mode='HTML')
    await Cards.number.set()


@dp.message_handler(state=Cards.number)
async def get_number(message: types.Message, state: FSMContext):
    number = message.text
    if number == "O—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer('–û—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=kb_main)
    else:
        user_id = int(message.from_user.id)

        if validate_number(number):
            # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –≤ –ë–î
            if await update_card_number(user_id, number):
                await state.update_data(card_number=number)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã
                await message.answer(
                    "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è —ç—Ç–æ–π –∫–∞—Ä—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–ö–æ—Ñ–µ–π–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç'):")
                await Cards.new_name.set()


        else:
            await message.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü—Ä–∏–º–µ—Ä: 22****7192:', reply_markup=cards_cancel)

@dp.message_handler(state=Cards.new_name)
async def set_card_name_after_add(message: types.Message, state: FSMContext):
    name = message.text.strip()
    data = await state.get_data()
    card = data.get("card_number")
    user_id = message.from_user.id

    if card:
        await set_card_name(user_id, card, name)
        await message.answer(f'üëç –ö–∞—Ä—Ç–∞ <code>{card}</code> —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ <i>{name}</i>!', parse_mode='HTML')
    else:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ /cards')
    await state.finish()


def validate_number(number):
    pattern = r'^\d{2}\*{4}\d{4}$'
    return re.match(pattern, number) is not None


@dp.message_handler(text='–£–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç—É')
async def delete_card(message: types.Message, state: FSMContext):
    user_id = int(message.from_user.id)
    cards_raw = await get_card_number_by_user_id(user_id)
    name_cards = await get_name_cards(user_id)

    card_list = [c.strip() for c in cards_raw.split('\n') if c.strip()]
    if not card_list:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ä—Ç.")
        return

    keyboard = InlineKeyboardMarkup(row_width=1)
    for card in card_list:
        name = name_cards.get(card, '‚Äî')
        button_text = f"{card} ‚Äî {name}"
        keyboard.add(InlineKeyboardButton(text=button_text, callback_data=f"delete_card:{card}"))

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:", reply_markup=keyboard)
    await state.finish()

@dp.callback_query_handler(lambda c: c.data.startswith('delete_card:'))
async def handle_delete_card_callback(call: types.CallbackQuery):
    card = call.data.split(':', 1)[1]
    user_id = int(call.from_user.id)

    await remove_card_number(user_id, card)
    await call.message.answer(f'üëç –ö–∞—Ä—Ç–∞ <code>{card}</code> —É–¥–∞–ª–µ–Ω–∞!')
    await call.answer()


@dp.message_handler(state=Cards.number_delete)
async def number_delete(message: types.Message, state: FSMContext):
    number = message.text
    if number == "O—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer('–û—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=kb_main)
    else:
        user_id = int(message.from_user.id)

        if validate_number(number):
            # —É–¥–∞–ª—è–µ–º –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –≤ –ë–î
            await remove_card_number(user_id, number)
            await state.finish()
            await message.answer(f'üëç–û—Ç–ª–∏—á–Ω–æ! –ö–∞—Ä—Ç–∞ {number} —É–¥–∞–ª–µ–Ω–∞!')

        else:
            await message.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü—Ä–∏–º–µ—Ä: 22****7192:', reply_markup=cards_cancel)


@dp.message_handler(text="–í–∞—à–∏ –∫–∞—Ä—Ç—ã")
async def handle_cards_button(message: types.Message):
    await cards_change(message)
